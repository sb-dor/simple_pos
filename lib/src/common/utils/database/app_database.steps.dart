// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'dart:typed_data' as i2;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    customerInvoices,
    customerInvoicesDetails,
    establishmentTable,
    orderTableDbTable,
  ];
  late final Shape0 customerInvoices = Shape0(
    source: i0.VersionedTable(
      entityName: 'customer_invoices',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 customerInvoicesDetails = Shape1(
    source: i0.VersionedTable(
      entityName: 'customer_invoices_details',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_3,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 establishmentTable = Shape2(
    source: i0.VersionedTable(
      entityName: 'establishment_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_11, _column_12, _column_13],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 orderTableDbTable = Shape3(
    source: i0.VersionedTable(
      entityName: 'order_table_db_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_14,
        _column_15,
        _column_12,
        _column_16,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get waiterId =>
      columnsByName['waiter_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get tableId =>
      columnsByName['table_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get total =>
      columnsByName['total']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get totalQty =>
      columnsByName['total_qty']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get status =>
      columnsByName['status']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get invoiceDatetime =>
      columnsByName['invoice_datetime']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'id',
      aliasedName,
      false,
      hasAutoIncrement: true,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'PRIMARY KEY AUTOINCREMENT',
      ),
    );
i1.GeneratedColumn<int> _column_1(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'waiter_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'table_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<double> _column_3(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'total',
      aliasedName,
      true,
      type: i1.DriftSqlType.double,
    );
i1.GeneratedColumn<double> _column_4(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'total_qty',
      aliasedName,
      true,
      type: i1.DriftSqlType.double,
    );
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'status',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'invoice_datetime',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get customerInvoiceId =>
      columnsByName['customer_invoice_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get productId =>
      columnsByName['product_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<double> get price =>
      columnsByName['price']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get qty =>
      columnsByName['qty']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get total =>
      columnsByName['total']! as i1.GeneratedColumn<double>;
}

i1.GeneratedColumn<int> _column_7(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'customer_invoice_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES customer_invoices (id)',
      ),
    );
i1.GeneratedColumn<int> _column_8(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'product_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<double> _column_9(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'price',
      aliasedName,
      true,
      type: i1.DriftSqlType.double,
    );
i1.GeneratedColumn<double> _column_10(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'qty',
      aliasedName,
      true,
      type: i1.DriftSqlType.double,
    );

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get documentId =>
      columnsByName['document_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_11(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'),
    );
i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'document_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get establishmentId =>
      columnsByName['establishment_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get vip =>
      columnsByName['vip']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get colorValue =>
      columnsByName['color_value']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<i2.Uint8List> get image =>
      columnsByName['image']! as i1.GeneratedColumn<i2.Uint8List>;
  i1.GeneratedColumn<bool> get changed =>
      columnsByName['changed']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'establishment_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<bool> _column_16(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'vip',
      aliasedName,
      true,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("vip" IN (0, 1))',
      ),
    );
i1.GeneratedColumn<DateTime> _column_17(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'updated_at',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<int> _column_18(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'color_value',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<i2.Uint8List> _column_19(String aliasedName) =>
    i1.GeneratedColumn<i2.Uint8List>(
      'image',
      aliasedName,
      true,
      type: i1.DriftSqlType.blob,
    );
i1.GeneratedColumn<bool> _column_20(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'changed',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("changed" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );

final class Schema3 extends i0.VersionedSchema {
  Schema3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    customerInvoices,
    customerInvoicesDetails,
    establishmentTable,
    orderTableDbTable,
  ];
  late final Shape0 customerInvoices = Shape0(
    source: i0.VersionedTable(
      entityName: 'customer_invoices',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 customerInvoicesDetails = Shape1(
    source: i0.VersionedTable(
      entityName: 'customer_invoices_details',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_3,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 establishmentTable = Shape2(
    source: i0.VersionedTable(
      entityName: 'establishment_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_11, _column_12, _column_13],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 orderTableDbTable = Shape3(
    source: i0.VersionedTable(
      entityName: 'order_table_db_table',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_14,
        _column_15,
        _column_12,
        _column_16,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      case 2:
        final schema = Schema3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(from1To2: from1To2, from2To3: from2To3),
);
